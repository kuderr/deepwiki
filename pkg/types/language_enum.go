// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package types

import (
	"database/sql/driver"
	"errors"
	"fmt"
	"strings"
)

const (
	// LanguageEnglish is a Language of type English.
	LanguageEnglish Language = "English"
	// LanguageRussian is a Language of type Russian.
	LanguageRussian Language = "Russian"
)

var ErrInvalidLanguage = fmt.Errorf("not a valid Language, try [%s]", strings.Join(_LanguageNames, ", "))

var _LanguageNames = []string{
	string(LanguageEnglish),
	string(LanguageRussian),
}

// LanguageNames returns a list of possible string values of Language.
func LanguageNames() []string {
	tmp := make([]string, len(_LanguageNames))
	copy(tmp, _LanguageNames)
	return tmp
}

// LanguageValues returns a list of the values for Language
func LanguageValues() []Language {
	return []Language{
		LanguageEnglish,
		LanguageRussian,
	}
}

// String implements the Stringer interface.
func (x Language) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Language) IsValid() bool {
	_, err := ParseLanguage(string(x))
	return err == nil
}

var _LanguageValue = map[string]Language{
	"English": LanguageEnglish,
	"english": LanguageEnglish,
	"Russian": LanguageRussian,
	"russian": LanguageRussian,
}

// ParseLanguage attempts to convert a string to a Language.
func ParseLanguage(name string) (Language, error) {
	if x, ok := _LanguageValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _LanguageValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return Language(""), fmt.Errorf("%s is %w", name, ErrInvalidLanguage)
}

// MarshalText implements the text marshaller method.
func (x Language) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Language) UnmarshalText(text []byte) error {
	tmp, err := ParseLanguage(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

var errLanguageNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *Language) Scan(value interface{}) (err error) {
	if value == nil {
		*x = Language("")
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case string:
		*x, err = ParseLanguage(v)
	case []byte:
		*x, err = ParseLanguage(string(v))
	case Language:
		*x = v
	case *Language:
		if v == nil {
			return errLanguageNilPtr
		}
		*x = *v
	case *string:
		if v == nil {
			return errLanguageNilPtr
		}
		*x, err = ParseLanguage(*v)
	default:
		return errors.New("invalid type for Language")
	}

	return
}

// Value implements the driver Valuer interface.
func (x Language) Value() (driver.Value, error) {
	return x.String(), nil
}

// Set implements the Golang flag.Value interface func.
func (x *Language) Set(val string) error {
	v, err := ParseLanguage(val)
	*x = v
	return err
}

// Get implements the Golang flag.Getter interface func.
func (x *Language) Get() interface{} {
	return *x
}

// Type implements the github.com/spf13/pFlag Value interface.
func (x *Language) Type() string {
	return "Language"
}
